<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>EarthPy - Nikolay Koldunov</title><link>http://earthpy.org/</link><description></description><lastBuildDate>Tue, 28 Mar 2023 10:20:00 +0200</lastBuildDate><item><title>About EarthPy</title><link>http://earthpy.org/first-post.html</link><description>&lt;p&gt;First post on EarthPy&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Tue, 28 Mar 2023 10:20:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2023-03-28:/first-post.html</guid></item><item><title>Background image in cartopy</title><link>http://earthpy.org/cartopy_backgroung.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Plot map of the temperature distribution in the ocean with some nice picture on the background.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background_img function in cartopy 0.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The &lt;a href="http://scitools.org.uk/cartopy/"&gt;cartopy&lt;/a&gt; is a great tool for creating maps in many ways more advanced than the usual workhorse for map creation in pyhton - the Basemap module. However I really missed one nice feature that Basemap have - easy way to add background image to the map. With the Basemap instance one can just write &lt;code&gt;m.etopo()&lt;/code&gt; and get a relativelly nice map of the ETOPO topography overplayed or &lt;code&gt;m.bluemarble()&lt;/code&gt; for the NASA's "Blue marble" image of the Earth . In the cartopy there is similar feature &lt;code&gt;stock_img()&lt;/code&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Fri, 17 Feb 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:earthpy.org,2017-02-17:/cartopy_backgroung.html</guid><category>visualization</category><category>cartopy</category></item><item><title>Calculations with arrays bigger than your memory (dask arrays)</title><link>http://earthpy.org/dask.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Process numpy arrays in parallel

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dask&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Geophysical models get higher and higher resolutions, producing more and more data. However numpy arrays and pandas data frames only work with data that fit in to a memory. For many of us it means that before real analysis we have to somehow subsample or aggregate initial data with some heavy lifting tools (like &lt;a href="https://code.azmaw.de/projects/cdo/embedded/index.html"&gt;cdo&lt;/a&gt;) and only then switch to convenience and beauty of python. These times might come to an end soon with introduction of &lt;a href="http://dask.pydata.org/en/latest/"&gt;dask&lt;/a&gt; - library that helps to parallelize computations on big chunks of data. This allows analyzing data that do not (or barely) fit in to your computer's memory as well as to utilize multiprocessing capabilities of your machine.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 07 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2015-06-07:/dask.html</guid><category>netCDF</category></item><item><title>Select time ranges in multidimensional arrays with pandas</title><link>http://earthpy.org/pandas_netcdf.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Select specific time ranges from multidimensional arrays

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pandas periods&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/koldunovn/earthpy.org/master/content/notebooks/pandas_netcdf.ipynb"&gt;Notebook file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I like pandas for very easy time handling, and would like to use similar approach when work with multidimensional arrays, for example from netCDF files. There are already &lt;a href="https://github.com/xray/xray"&gt;some efforts&lt;/a&gt; to do this. However I don't need anything complicated, just select some months, years of time periods. For this I can use pandas itself and benefit from its great time indexing. Below I will show a small example of how to do this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Necessary imports (everything can be installed from &lt;a href="http://conda.pydata.org/miniconda.html"&gt;Anaconda&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Mon, 16 Feb 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:earthpy.org,2015-02-16:/pandas_netcdf.html</guid><category>pandas</category><category>netCDF</category></item><item><title>How to make your python code run faster</title><link>http://earthpy.org/speed.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Make your python scripts run faster

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;multiprocessor, cython, numba&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/koldunovn/earthpy.org/master/content/notebooks/speed.ipynb"&gt;Notebook file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;One of the counterarguments that you constantly hear about using python is that it is slow. This is somehow true for many cases, while most of the tools that scientist mainly use, like &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;scipy&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt; have big chunks written in &lt;code&gt;C&lt;/code&gt;, so they are very fast. For most of the geoscientific applications main advice would be to use vectorisation whenever possible, and avoid loops. However sometimes loops are unavoidable, and then python speed can get on to your nerves. Fortunately there are several easy ways to make your python loops faster.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 15 Feb 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:earthpy.org,2015-02-15:/speed.html</guid><category>numpy</category><category>numba</category><category>cython</category></item><item><title>Seaborn library</title><link>http://earthpy.org/seaborn_library.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Make matplotlib plots look nicer

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Seaborn&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/koldunovn/earthpy.org/master/content/notebooks/Seaborn.ipynb"&gt;Notebook file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We all know and love matplotlib, but I guess most of you agree that the default output of matplotlib is ugly. One can spend hours tweaking the plots, and for sure you will get very nice result at the end - customization is one of the great powers of matplotlib after all. However there is another way - just rely on beautiful defaults created by someone else. Below I will show you couple of examples with Seaborn library, that is based on matplotlib, but make figures look much better. It also provide very simple way to draw statistical graphs, that I will also demonstrate.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sat, 14 Feb 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:earthpy.org,2015-02-14:/seaborn_library.html</guid><category>matplotlib</category><category>seaborn</category></item><item><title>IPyhton interact and widgets (or how to write python version of ncview in about 3 lines of code)</title><link>http://earthpy.org/pyncview_pm.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Work with data interactively

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IPython widgets, interact&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/koldunovn/earthpy.org/master/content/notebooks/pyncview_pm.ipynb"&gt;Notebook file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I always wanted to write a GUI to explore my data. This is probably one of the things that you can't get rid of as a former hardcore Windows user. You need all this buttons and sliders and check boxes, or at least you think you do. But every time I looked at GUI toolkits for python I was bored after 10 minutes of reading. I just want to show the plot and control couple of variables, and in order to do so I have to learn first how to place elements on the canvas, create handlers and so on and so forth. Boring and not worth it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2014-04-12:/pyncview_pm.html</guid><category>IPython</category></item><item><title>Time series analysis with pandas. Part 2</title><link>http://earthpy.org/time_series_analysis_with_pandas_part_2.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;continue interactive analysis of time series (AO, NAO indexes)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/koldunovn/earthpy.org/master/content/notebooks/time_series_analysis_with_pandas_part_2.ipynb"&gt;Notebook file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In the &lt;a href="http://earthpy.org/pandas-basics.html"&gt;previous part&lt;/a&gt; we looked at very basic ways of work with pandas. Here I am going to introduce couple of more advance tricks. We will use very powerful pandas IO capabilities to create time series directly from the text file, try to create seasonal means with &lt;em&gt;resample&lt;/em&gt; and multi-year monthly means with &lt;em&gt;groupby&lt;/em&gt;. At the end I will show how new functionality from the upcoming IPython 2.0 can be used to explore your data more efficiently with sort of a simple GUI (&lt;em&gt;interact&lt;/em&gt; function). There might be easier or better ways to do some of the things discussed here, and I will be happy to hear about them in comments :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sat, 15 Mar 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:earthpy.org,2014-03-15:/time_series_analysis_with_pandas_part_2.html</guid><category>pandas</category><category>IPython</category></item><item><title>Interpolation between grids with Basemap</title><link>http://earthpy.org/interpolation_between_grids_with_basemap.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Interpolate data from regular to curvilinear grid

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Basemap.interp function&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/koldunovn/earthpy.org/master/content/notebooks/interpolation_between_grids_with_basemap.ipynb"&gt;Notebook file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Unfortunately geophysical data distributed on a large variety of grids, and from time to time we have to compare our variables to each other. Often plotting a simple map is enough, but if you want to go a bit beyond qualitative comparison then you have to interpolate data from one grid to another. One of the easiest way to do this is to use &lt;em&gt;basemap.interp&lt;/em&gt; function from Matplotlib Basemap library. Here I will show how to prepare your data and how to perform interpolation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Some necessary imports:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sat, 23 Nov 2013 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-11-23:/interpolation_between_grids_with_basemap.html</guid><category>basemap</category><category>matplotlib</category></item><item><title>00 - Why Python?</title><link>http://earthpy.org/00_why_python.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is part of &lt;a href="https://github.com/koldunovn/python_for_geosciences"&gt;&lt;strong&gt;Python for Geosciences&lt;/strong&gt;&lt;/a&gt; notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;===========&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="--It's-easy-to-learn,-easy-to-read-and-fast-to-develop"&gt;- It's easy to learn, easy to read and fast to develop&lt;a class="anchor-link" href="#--It's-easy-to-learn,-easy-to-read-and-fast-to-develop"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;It is considered to be the language of choice for beginners, and proper code formatting is in the design of the language. This is especially useful when you remember, that we are the scientist not programmers. What we need is to have a language that can be learned quickly, but at the same time is powerful enough to satisfy our needs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="--It's-free-and-opensource."&gt;- It's free and opensource.&lt;a class="anchor-link" href="#--It's-free-and-opensource."&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;You will be able to use your scripts even if your institute does not have enough money to buy expensive software (MATLAB or IDL). You can make changes in the code, or at least have the possibility to look at the source code if you suspect that there is a bug.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 27 Oct 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-10-27:/00_why_python.html</guid><category>python for geosciences</category></item><item><title>01 Scientific modules and IPython</title><link>http://earthpy.org/01_scientific_modules_and_ipython.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is part of &lt;a href="https://github.com/koldunovn/python_for_geosciences"&gt;&lt;strong&gt;Python for Geosciences&lt;/strong&gt;&lt;/a&gt; notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;================&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Core-scientific-packages"&gt;Core scientific packages&lt;a class="anchor-link" href="#Core-scientific-packages"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;When people say that they do their scientific computations in Python it's only half true. Python is a construction set, similar to MITgcm or other models. Without packages it's only a core, that although very powerful, does not seems to be able to do much by itself.&lt;/p&gt;
&lt;p&gt;There is a set of packages, that almost every scientist would need:&lt;/p&gt;
&lt;p&gt;&lt;img height="200" src="core.png" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We are going to talk about all exept Sympy&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="IPython-and-pylab"&gt;IPython and pylab&lt;a class="anchor-link" href="#IPython-and-pylab"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In order to be productive you need comfortable environment, and this is what IPython provide. It was started as enhanced python interactive shell, but with time become architecture for interactive computing.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 27 Oct 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-10-27:/01_scientific_modules_and_ipython.html</guid><category>python for geosciences</category></item><item><title>02 Python basics</title><link>http://earthpy.org/02_python_basics.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is part of &lt;a href="https://github.com/koldunovn/python_for_geosciences"&gt;&lt;strong&gt;Python for Geosciences&lt;/strong&gt;&lt;/a&gt; notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;================&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt; is a widely used general-purpose, high-level programming language. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages 
such as C. The language provides constructs intended to enable clear programs on both a small and large scale.&lt;/p&gt;
&lt;p&gt;-- &lt;cite&gt;From Wikipedia, the free encyclopedia&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Variables"&gt;Variables&lt;a class="anchor-link" href="#Variables"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Python uses &lt;a href="http://en.wikipedia.org/wiki/Duck_typing"&gt;duck typing&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Int"&gt;Int&lt;a class="anchor-link" href="#Int"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 27 Oct 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-10-27:/02_python_basics.html</guid><category>python for geosciences</category></item><item><title>03 NumPy arrays</title><link>http://earthpy.org/03_numpy_arrays.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is part of &lt;a href="https://github.com/koldunovn/python_for_geosciences"&gt;&lt;strong&gt;Python for Geosciences&lt;/strong&gt;&lt;/a&gt; notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;================&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;img height="100" src="numpy.png" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;ul&gt;
&lt;li&gt;a powerful N-dimensional array object&lt;/li&gt;
&lt;li&gt;sophisticated (broadcasting) functions&lt;/li&gt;
&lt;li&gt;tools for integrating C/C++ and Fortran code&lt;/li&gt;
&lt;li&gt;useful linear algebra, Fourier transform, and random number capabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 27 Oct 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-10-27:/03_numpy_arrays.html</guid><category>python for geosciences</category></item><item><title>04 Work with different data formats</title><link>http://earthpy.org/04_work_with_different_data_formats.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is part of &lt;a href="https://github.com/koldunovn/python_for_geosciences"&gt;&lt;strong&gt;Python for Geosciences&lt;/strong&gt;&lt;/a&gt; notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;================&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Binary-data"&gt;Binary data&lt;a class="anchor-link" href="#Binary-data"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Open-binary"&gt;Open binary&lt;a class="anchor-link" href="#Open-binary"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Data from &lt;a href="http://nsidc.org/data/nsidc-0051.html"&gt;Sea Ice Concentrations from Nimbus-7 SMMR and DMSP SSM/I-SSMIS Passive Microwave Data&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 27 Oct 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-10-27:/04_work_with_different_data_formats.html</guid><category>python for geosciences</category></item><item><title>05 Graphs and maps (Matplotlib and Basemap)</title><link>http://earthpy.org/05_Graphs_and_maps_Matplotlib_and_Basemap.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is part of &lt;a href="https://github.com/koldunovn/python_for_geosciences"&gt;&lt;strong&gt;Python for Geosciences&lt;/strong&gt;&lt;/a&gt; notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;=============&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://matplotlib.org/"&gt;Matplotlib&lt;/a&gt; is a python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's prepare some data:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 27 Oct 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-10-27:/05_Graphs_and_maps_Matplotlib_and_Basemap.html</guid><category>python for geosciences</category></item><item><title>07 Other modules for geoscientists</title><link>http://earthpy.org/07_Other_modules_for_geoscientists.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is part of &lt;a href="https://github.com/koldunovn/python_for_geosciences"&gt;&lt;strong&gt;Python for Geosciences&lt;/strong&gt;&lt;/a&gt; notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;=============&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Some of the things will not work on ZMAW computers (Iris, Cartopy).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Iris"&gt;Iris&lt;a class="anchor-link" href="#Iris"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://scitools.org.uk/iris/"&gt;Iris&lt;/a&gt; seeks to provide a powerful, easy to use, and community-driven Python library for analysing and visualising meteorological and oceanographic data sets. Kind of Ferret replacement. Developed in the Met Office by group of 7 full time developers. There are more than 300 active python users in Met Office.&lt;/p&gt;
&lt;p&gt;With Iris you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a single API to work on your data, irrespective of its original format.&lt;/li&gt;
&lt;li&gt;Read and write (CF-)netCDF, GRIB, and PP files.&lt;/li&gt;
&lt;li&gt;Easily produce graphs and maps via integration with matplotlib and cartopy.&lt;/li&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 27 Oct 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-10-27:/07_Other_modules_for_geoscientists.html</guid><category>python for geosciences</category></item><item><title>Links</title><link>http://earthpy.org/links.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Here is small collection of links that I find useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Websites:"&gt;Websites:&lt;a class="anchor-link" href="#Websites:"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="https://github.com/jrjohansson/scientific-python-lectures#online-read-only-versions"&gt;Lectures on Scientific Computing with Python.&lt;/a&gt; - very good introduction to the topic writen as a collection of IPython Notebooks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks"&gt;A gallery of interesting IPython Notebooks&lt;/a&gt; - constant source of inspiration :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://oceanpython.org/"&gt;OceanPython.org&lt;/a&gt; - OceanPython.org is a website to learn Python Programming Language for ocean- and marine-science applications and to share Python code. OceanPython.org is maintained by students, staff and post-docs at the Department of Oceanography of Dalhousie University (Canada)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="http://earthpy.org/"&gt;EarthPy&lt;/a&gt; - EarthPy is a collection of IPython notebooks with examples of Earth Science related Python code. It can be tutorials, descriptions of the modules, small scripts, or just tricks, that you think might be useful for others.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 27 Oct 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-10-27:/links.html</guid><category>python for geosciences</category></item><item><title>Use of Basemap for Amazon river discharge visualization</title><link>http://earthpy.org/earthpy-basemap-amazon.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Show how to work with river discharge data.
    Also show cople of ways to visualise this data with Basemap. 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Pandas, Basemap&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This notebook was originally created for &lt;a href="http://marinexplore.org/challenges/1-earth-day-data-challenge"&gt;Marinexplore Earth Data Challenge&lt;/a&gt;, in order to show how data for the submission was processed. I think it might be also interesting for those who begin to use python in geoscience, because it demonstrate couple of ways to handle csv and netCDF data and plotting capabilities of the Basemap module. There will be no extensive explanations though, moistly the code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I want to show a small example of the work flow that is more or less typical during research process. Often you see some interesting feature in your data and want to investigate it in more detail. If you not lucky enough to work with the model data, this would require dealing with multiple data sources, and possibly multiple file formats. Having all data sets in one place in consistent format becomes very handy for this type of applications.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sat, 29 Jun 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-06-29:/earthpy-basemap-amazon.html</guid><category>basemap</category><category>matplotlib</category><category>visualization</category></item><item><title>Plot grid and transect with PyNGL and komod</title><link>http://earthpy.org/komod-mitplot-draw-transect.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Draw a grid and a transect with PyNGL module

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;komod module

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://raw.github.com/koldunovn/earthpy.org/master/content/earthpy_mitplot2.ipynb"&gt;&lt;strong&gt;Notebook file&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is a short follow up of the &lt;a href="http://earthpy.org/komod-mitplot-drawmap.html"&gt;previous post&lt;/a&gt; about &lt;a href="https://github.com/koldunovn/komod"&gt;komod module&lt;/a&gt;, that is essentially a set of wrapper functions for &lt;a href="http://www.pyngl.ucar.edu/"&gt;PyNGL module&lt;/a&gt;. Here I am going to show how to plot a grid of your model and how to draw a transect. I am going to use the same data set af before: &lt;a href="http://data.nodc.noaa.gov/thredds/fileServer/woa/WOA09/NetCDFdata/temperature_annual_5deg.nc"&gt;mean temperature from the World Ocean Atlas 2009&lt;/a&gt; (5 deg. resolution).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Import modules:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Fri, 19 Apr 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-04-19:/komod-mitplot-draw-transect.html</guid><category>komod</category><category>visualization</category><category>PyNGL</category></item><item><title>Climatology data access with ulmo</title><link>http://earthpy.org/ulmo.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;easy access to climatology data 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ulmo

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/koldunovn/earthpy.org/master/content/ulmo.ipynb"&gt;&lt;strong&gt;Notebook file&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;One of the main things that bothers me most at work is data conversion. World would be a much better place for somebody like me if everybody use netCDF file format for data distribution. While situation slightly changing, and more and more organisations switch to netCDF, there are still plenty of those who distribute their data in some crazy forms.&lt;/p&gt;
&lt;p&gt;Would it be nice if somebody once and for all create converters for all this formats and provide a way to directly search and access data from python? Imagine - instead of spending time writing regular expressions for another converter you could &lt;s&gt;watch cat videos on youtube&lt;/s&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Tue, 16 Apr 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-04-16:/ulmo.html</guid><category>pandas</category><category>data analysis</category></item><item><title>Plot maps with PyNGL and komod</title><link>http://earthpy.org/komod-mitplot-drawmap.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Quickly draw maps with PyNGL module

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;komod module

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/koldunovn/earthpy.org/master/content/earthpy_mitplot.ipynb"&gt;&lt;strong&gt;Notebook file&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The PyNGL module produce very nice looking maps, and it's capabilities in fine tuning the resulting image in many cases are much better compared to matplotlib Basemap module. However this flexibility come at a price: in order to draw a map of an acceptable appearance one has to write quite a long script, and specify many parameters. Of course once you find your "best ever" set of parameters, you basically copy/paste them from one script to another with only slight modifications. But at some point you get annoyed by this long sheets of code, that by the way do not look very nice in IPython notebooks, and you write a wrapper function.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sun, 31 Mar 2013 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-03-31:/komod-mitplot-drawmap.html</guid><category>komod</category><category>visualization</category><category>PyNGL</category></item><item><title>Time series analysis with pandas</title><link>http://earthpy.org/pandas-basics.html</link><description>
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;Task&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;analysis of several time series data (AO, NAO)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pandas

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/urls/github.com/koldunovn/earthpy.org/raw/master/content/earthpy_pandas_basics.ipynb"&gt;&lt;strong&gt;Notebook file&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Here I am going to show just some basic &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt; stuff for time series analysis, as I think for the Earth Scientists it's the most interesting topic. If you find this small tutorial useful, I encourage you to watch &lt;a href="http://pyvideo.org/video/1198/time-series-data-analysis-with-pandas"&gt;this video&lt;/a&gt;, where Wes McKinney give extensive introduction to the time series data analysis with pandas.&lt;/p&gt;
&lt;p&gt;On the official website you can find explanation of what problems pandas solve in general, but I can tell you what problem pandas solve for me. It makes analysis and visualisation of 1D data, especially time series, MUCH faster. Before pandas working with time series in python was a pain for me, now it's fun. Ease of use stimulate in-depth exploration of the data: why wouldn't you make some additional analysis if it's just one line of code? Hope you will also find this great tool helpful and useful. So, let's begin.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikolay Koldunov</dc:creator><pubDate>Sat, 30 Mar 2013 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:earthpy.org,2013-03-30:/pandas-basics.html</guid><category>pandas</category><category>data analysis</category><category>visualization</category></item></channel></rss>